#include <gperl.hpp>
#include "gen_decl_code.cpp"
#include <vmlibs.hpp>

using namespace std;
bool isRunFinished = false;
static void *jitTimingCheck(void *args)
{
	DBG_PL("jitTimingCheck");
	JITParams *params = (JITParams *)args;
	void **jmp_tbl = params->jmp_table;
	size_t params_num = params->params_num;
	JITParam **prms = params->params;
	while (!isRunFinished) {
		for (size_t i = 0; i < params_num; i++) {
			JITParam *param = prms[i];
			if (!param->func && param->mtd->jit_count_down == 0 && param->return_type != Return) {
				//DBG_PL("Start JIT Compile");
				GPerlJITCompiler jit_compiler;
				param->func = jit_compiler.compile(param);
				size_t calls_num = param->calls_num;
				GPerlVirtualMachineCode *mtd = param->mtd;
				for (size_t j = 0; j < calls_num; j++) {
					int offset = param->offsets[j];
					switch ((mtd + offset)->op) {
					case CALL: case FASTCALL0: case FASTCALL1: case FASTCALL2: case FASTCALL3:
						(mtd + offset)->opnext = jmp_tbl[JIT_CALL];
						break;
					case SELFCALL:
						(mtd + offset)->opnext = jmp_tbl[JIT_SELFCALL];
						break;
					case SELF_FASTCALL0:
						(mtd + offset)->opnext = jmp_tbl[JIT_SELF_FASTCALL0];
						break;
					case SELF_FASTCALL1:
						(mtd + offset)->opnext = jmp_tbl[JIT_SELF_FASTCALL1];
						break;
					case SELF_FASTCALL2:
						(mtd + offset)->opnext = jmp_tbl[JIT_SELF_FASTCALL2];
						break;
					case SELF_FASTCALL3:
						(mtd + offset)->opnext = jmp_tbl[JIT_SELF_FASTCALL3];
						break;
					default:
						break;
					}
				}
			}
		}
	}
    return NULL;
}

GPerlValue GPerlVirtualMachine::run(GPerlVirtualMachineCode *codes, JITParams *params)
{
	GPerlVirtualMachineCode *pc = codes, *code_ = NULL, *top = NULL;
	GPerlValue *stack = createMachineStack();
	GPerlEnv *callstack = createCallStack();
	callstack->pc = pc;
	callstack->cur_pc = pc;
	(callstack+1)->cur_pc = pc;
	GPerlValue *argstack = callstack->argstack;
	GPerlValue *reg = callstack->reg;
	callstack->ebp = stack;
	GPerlEnv *callstack_bottom = callstack;
	char shared_buf[128] = {0};//TODO must be variable buffer
	string outbuf = "";
	root.stack_bottom = stack;
	root.callstack_bottom = callstack_bottom;
	root.global_vmemory = global_vmemory;
#include "gen_label.cpp"
#ifdef ENABLE_JIT_COMPILE
	GPerlJITCompiler jit_compiler;
	if (params && params->params_num > 0) {
		this->params = params;
		pthread_t th;
		params->jmp_table = jmp_table;
		pthread_create(&th, NULL, jitTimingCheck, (void *)params);
	}
#endif
    DISPATCH_START();
<TMPL_LOOP NAME=vm_codes>
	CASE(<TMPL_VAR NAME=op>, {<TMPL_IF NAME=single_static_type_check_flag><TMPL_IF NAME=use_stack_flag>
		int type = TYPE_CHECK(stack[pc->dst]);</TMPL_IF><TMPL_IF NAME=use_global_flag>
		int type = TYPE_CHECK(global_vmemory[pc->dst]);</TMPL_IF><TMPL_IF NAME=use_register_flag>
		int type = TYPE_CHECK(reg[pc->dst]);</TMPL_IF>
		pc->opnext = jmp_table[pc->op + 1 + type];
		BREAK();</TMPL_IF><TMPL_IF NAME=single_type_check_flag><TMPL_IF NAME=use_stack_flag>
		int type = TYPE_CHECK(stack[pc->dst]);</TMPL_IF><TMPL_IF NAME=use_global_flag>
		int type = TYPE_CHECK(global_vmemory[pc->dst]);</TMPL_IF><TMPL_IF NAME=use_register_flag>
		int type = TYPE_CHECK(reg[pc->dst]);</TMPL_IF>
		goto *jmp_table[pc->op + 2 + type];
		BREAK();</TMPL_IF><TMPL_IF NAME=double_static_type_check_flag>
		int dst_type = TYPE_CHECK(reg[pc->dst]);
		int src_type = TYPE_CHECK(reg[pc->src]);
		pc->opnext = jmp_table[pc->op + 1 + ((dst_type + src_type) >> 1)];
		BREAK();</TMPL_IF><TMPL_IF NAME=double_type_check_flag>
		int dst_type = TYPE_CHECK(reg[pc->dst]);
		int src_type = TYPE_CHECK(reg[pc->src]);
		goto *jmp_table[pc->op + 2 + ((dst_type + src_type) >> 1)];
		BREAK();</TMPL_IF><TMPL_IF NAME=normal_flag>
		GPERL_<TMPL_VAR NAME=func>(<TMPL_VAR NAME=args>);<TMPL_IF NAME=pc_increment_flag>
		pc++;</TMPL_IF>
		BREAK();</TMPL_IF>
	});</TMPL_LOOP>
	CASE(THCODE, {
		createDirectThreadingCode(codes, jmp_table);
		size_t pkgs_n = pkgs->size();
		for (size_t i = 0; i < pkgs_n; i++) {
			GPerlClass *gclass = (GPerlClass *)pkgs->at(i);
			GPerlString **mtd_names = gclass->ext->mtd_names;
			for (size_t j = 0; mtd_names[j] != NULL; j++) {
				GPerlFunc *mtd = gclass->mtds[mtd_names[j]->hash];
				createDirectThreadingCode(mtd->code, jmp_table);
			}
		}
		(void)block_table;
		//createSelectiveInliningCode(codes, jmp_table, block_table);
		return reg[0];
	});
	CASE(KEYS, {
		GPerlArray *a = GPERL_KEYS((callstack+1)->argstack[0]);
		OBJECT_init(reg[pc->dst], a);
		pc++;
		BREAK();
	});
	CASE(VALUES, {
		GPerlArray *a = GPERL_VALUES((callstack+1)->argstack[0]);
		OBJECT_init(reg[pc->dst], a);
		pc++;
		BREAK();
	});
	CASE(EACH_LET, {
		GPERL_EACH_LET(pc->dst, pc->src);
		BREAK();
	});
	CASE(EACH_STEP, {
		GPERL_EACH_STEP(pc->dst, pc->src);
		BREAK();
	});

#include "gen_fast_vmcode.cpp"

	DISPATCH_END();
	return reg[0];
}
